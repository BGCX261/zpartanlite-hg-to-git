package divtastic{        public class DispatchTo    {                // TODO: try using Vector in place of Array?          // Can't that's flash 10! and there are no compiler switches in as3?        // Vector.<Function>        // maybe consider... http://divillysausages.com/blog/as3_conditional_compilation        // but this is a bit complex for a generic lib, but Array could be made         // Vector.<Function> in most case below for flash 10 target to get better typing.                private var func0:                          Function;//Void -> Void ;        private var times0:                         int;                private var func:                           Array;/*Array<Void -> Void> ;*/        private var times:                          Array;/*<Int> ;*/                public var tellEnabled:                     Function;        public var tellDisabled:                    Function;                public var kill:                            Function;                        public function enableKill()        {                        kill = killAll;                    }                        public function disableKill()        {                        kill = function()            {                trace("Can't kill other listeners unless enableKill");            }                    }                        private function get length(): *        {                        if( func == null )            {                                if( func0 != null )                {                                        return 1;                                    }                else                {                                        return null;                                    }                            }                        return func.length;                    }                        public function DispatchTo()        {                    }                        public function add(    f_:     Function                            ,   once:   Boolean = false                            ,   amount: int     = 0 )        {                        // Store first...                        if( length == null )            {                                func0 = f_;                if( tellEnabled != null )                {                                        tellEnabled();                                    }                /*                if( once != null )                {                  */                      if( once == true )                    {                                                times0 = 1;                                            }                    else                    {                                                times0 = -1;                                            }                    /*                }					*/				/*	                else if( amount != null )                {                    */                    times0 = amount;                    /*                }                else                {                                        times0 = -1;                                    }                */                return;                            }            else if( func == null )            {                                func    = new Array() ;                times   = new Array() ;                func.push( func0 );                times.push( times0 );                func0 = null;                times0 = 0;                            }                                    func.push( f_ ) ;                        if( once == true )            {                            if( true )                {                                        times.push( 1 ) ;                                    }                else                {                                        times.push( -1 ) ;                                    }                            }            else if( amount != 0 )            {                                times.push( amount ) ;                            }            else            {                                times.push( -1 ) ;                            }                }                        public function swap( current_: Function, new_: Function  )        {                        remove( current_ );            add( new_ );                    }                        public function remove( f_: Function /* Void -> Void */ )        {                        var i: int;                        if( length == null || f_ == null ) return false;            if( length == 1  )            {                //TODO: Need to check if this line works correctly!!                if( func0 == f_ )                {                    //trace('removing func0 ' + f_ );                    func0   = null;                    times0  = 0;                    if( tellDisabled != null )                    {                                                tellDisabled();                                            }                }                return;            }                        for( i = 0; i< func.length; i++ )            {                //TODO: Need to check if this line works correctly!!                if( func[ i ] == f_ )                {                    //trace('removing func[ '+i +' ]' + f_ );                    func.splice( i, 1 ) ;                    times.splice( i, 1 ) ;                                    }                            }                                    if( length == 1 )            {                //trace(' length = 1 ' );                func0   = func[0];                times0  = times[0];                func    = null;                times0  = 0;            }                    }                // This is private by default and accessed by kill if enableKill        // seems over the top but should not be able to remove all listeners by default        // only in special cases.        private function killAll()        {                        if( length == 1 )            {                                func0   = null;                times0  = 0;                return;                            }                        var i: int;            for( i = 0; i< func.length; i++ )            {                                func.splice( i, 1 ) ;                times.splice( i, 1 ) ;                            }            func    = new Array() ;            times   = new Array() ;                    }                        public function dispatch()        {                        if( length == null ) return false;            var count: int ;                        if( length == 1 )            {                                if( func0 != null ) func0();                if( times0 == -1 )                {                    // don't remove if -1 as implies infinite Signal use until removed.                }                else                {                    times0--;                    if( times0 == 0 )                    {                        remove( func0 );                    }                }                return;            }                        var i: int;            for( i = 0; i< func.length; i++ )            {                                func[ i ]() ;                count       = times[ i ] ;                                if( count == -1 )                {                                        // don't remove if -1 as implies infinite Signal use untill removed.                                    }                else                {                                        count--;                    times[ i ]  = count ;                                        if( count == 0 )                    {                                                func.splice( i, 1 ) ;                        times.splice( i, 1 ) ;                                            }                                }                        }                }        }}